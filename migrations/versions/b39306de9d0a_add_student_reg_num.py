"""Add student reg num

Revision ID: b39306de9d0a
Revises: fe9f423e4d51
Create Date: 2025-08-24 16:01:53.431802

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
import uuid

# revision identifiers, used by Alembic.
revision = 'b39306de9d0a'
down_revision = 'fe9f423e4d51'
branch_labels = None
depends_on = None


# def upgrade():
#     # ### commands auto generated by Alembic - please adjust! ###
#     with op.batch_alter_table('students', schema=None) as batch_op:
#         batch_op.add_column(sa.Column('reg_code', sa.String(length=200), nullable=True))

#         # student = table("students", column("id", sa.Integer), column("reg_code", sa.String))
#         conn = op.get_bind()
#         results = conn.execute(sa.text("SELECT id FROM students WHERE reg_code"))
#         for row in results:
#             tmp_reg = f"{uuid.uuid4()}.fake_reg"
#             conn.execute(
#                 sa.text("UPDATE students SET reg_code = :reg_code WHERE id = :id"),
#                 {"reg_code":tmp_reg, "id":row.id}
#                 )

#         batch_op.alter_column("reg_code", nullable=False)
#         batch_op.create_unique_constraint("StudentRegNoUK", ['reg_code'])

#     # ### end Alembic commands ###

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. FIRST, just add the column as nullable.
    with op.batch_alter_table('students', schema=None) as batch_op:
        batch_op.add_column(sa.Column('reg_code', sa.String(length=200), nullable=True))

    # 2. NOW, outside the batch_alter_table context, get a connection and populate the data.
    # This ensures the schema change is complete before we try to query the new column.
    conn = op.get_bind()
    
    # Select ALL student IDs (we need to update all of them)
    results = conn.execute(sa.text("SELECT id FROM students"))
    
    # For each student, generate a unique reg code and update their record
    for row in results:
        # Generate a unique registration code
        tmp_reg = f"{uuid.uuid4()}" # You can keep or remove ".fake_reg"
        # Execute an update statement for this specific student
        conn.execute(
            sa.text("UPDATE students SET reg_code = :reg_code WHERE id = :id"),
            {"reg_code": tmp_reg, "id": row.id}
        )

    # 3. FINALLY, alter the column to be NON-Nullable and add the unique constraint.
    # We need a new batch_alter_table context for this.
    with op.batch_alter_table('students', schema=None) as batch_op:
        batch_op.alter_column('reg_code', nullable=False)
        batch_op.create_unique_constraint("StudentRegNoUK", ['reg_code'])

    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('students', schema=None) as batch_op:
        batch_op.drop_constraint("StudentRegNoUK", type_='unique')
        batch_op.drop_column('reg_code')

    # ### end Alembic commands ###
